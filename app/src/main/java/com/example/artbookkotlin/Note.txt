//Options Menu Ac

- res'e tikla Android Resource File a bas
- resource type'dan Menu secilcek
- isim ata bu projede art_menu dedik
- "<" yaz item cikcak sec
- itemdan sonra bir bosluk birak id goruncek sec ismi optional
- yine bosluk birak title cikcak title optional
// olusturdugumuz bu menuye option menu deniyor

// menuyu olusturduk simdi bunu MainActivity'e baglamamiz lazim
// bunu baglayabilmemiz icin 2 adet fonksiyonu override etmemiz gerekiyor
- mainacticity de options yazinca onCreateoption menu cikcak onu sec

override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        return super.onCreateOptionsMenu(menu)
    }

override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return super.onOptionsItemSelected(item)
    }

// bu ikisini acmamiz gerkiyor cunku option menuyu baglamamiz lazim
// onCreateOptionsMenu'de baglama isini yapicaz
// onOptionsItemSelected'da tiklanirsa ne olur onu yapicaz


// onCreateOptionsMenu'de inflater acmamiz gerekiyor kendisinin menu inflater'i var.
val menuInflater = menuInflater
menuInflater.inflate(R.menu.art_menu,menu)
//onCreateOptionsMenu'yu baglamis olduk

//// onOptionsItemSelected'da tiklaninca yapilcak activiteyi yazicaz

if(item.itemId == R.id.add_art_item){
            val intent = Intent(this@MainActivity,ArtActivity::class.java)
            startActivity(intent)
        }
// option menude tiklayinca bu bizi artactivity e gonderecek

////Gallery Permission

// ilk olarak manifest doyasinda duzenleme yapmamiz gerekiyor cunku manifestden izinleri kontrol ediyoruz

    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
// Bunu yazarak izini vermis oldu

// select imagea tiklayinca ilk once izin istemesi gerekiyor galeri erisimi icin

if(ContextCompat.checkSelfPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED){

                }
            else{

            }
// galeriye ulasmak dangerous kategorisinde oldugundan if icindeki sekilde izni kontrol etmek zorundayiz ifin icindeki yapidan manifestteki izni onayli degilse
diye kontrol ediyor eger zaten edilmisse else'e giriyor

//else altina simdi intent yapicaz ama intent ile baska bir sayfaya gitmek icin degil intent ayni zamanda action almak icinde kullaniliyor
Ornegin : telefon cevaplamak icin kabul et dersen eger orada intent yazmamiz gerekiyor bunu da Intent.ACTION_PICK ile yapacagiz

                val intentToGallery = Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
// Else icinde yazdigimiz bu kod ile gallerye ulasicaz. Unutulmamasi gereken bir sey var intent bu durumda iki tane sey istiyor biri action
digeri ise URI bu aslinda adressi belirtir aslinda storage icinde biz gallerideki adresi istiyoruz boylelikle fotoya ulasicaz.

// if icinde permission almamiz gerekiyor ayrica kabul edilmezse eger sneakbar yazicaz ki kabul edilmediginde kabul edilmesi icin kucuk bir yer acacagiz
// buna androide RATIONALE deniyor. Sen permission kabul edilmediginde bir daha isterken sebebini belirttigin icin rasiyonel demisler

 if(ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_EXTERNAL_STORAGE)){
                    //Rationale
                    //SnackBar
                    Snackbar.make(view,"Permission needed for gallery",Snackbar.LENGTH_INDEFINITE).setAction("Give Permission",View.OnClickListener {
                        // Request Permission

                    }).show()
                    }else{
                        //Request Permission
                    }
                }

 // Bu kod ile snackBar olusturmus oluyoruz ayni zamanda SnackBar icindeki butonda ne olacagini yazacagiz.
 // bunun icinde ActivityResultLauncher sinifinini dahil etmemiz gerekiyor
 // aslinda bu open activity result launcher ve bu sen galeriden bir foto sectiginde o fotoyu yani veriyi cekicek
 // ilk olarak 2 tane variable tanimlicaz bunlardan biri izin istemek icin bir digeri ise intent ile galeriye gitmek icin

private lateinit var activityResultLauncher : ActivityResultLauncher<Intent>
private lateinit var permissionLauncher: ActivityResultLauncher<String>

//boylelikle tanimlamis olduk fonksiyonun ustunde. Bunlari initialze etmemiz gerekiyor
//initilize etmek uzun surecegi icin ve bunu baska yerlerde kullanacagimiz icin fonksiyon haline getirmek daha verimli hale getirecektir.

private fun launcherRegister(){}
// Diye fonksiyonumuzu acip onCrate icinde cagirmamiz gerekiyor cagirdiktan sonra fonksiyonun icine devam edebiliriz

activityResultLauncher = registerForActivityResult()
// registerForActivityResult() bizim icin hali hazirda tanimlanmis bir fonskiyon bu fonksiyonu yazarak baslayabiliriz.
// Parantez icine StartActivityForResult yaziyoruz cunku bu galeriden secmememiz icin acilcak pencereyi baslatmaya yaricak

private fun launcherRegister(){
 activityResultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
 if(result.resultCode == RESULT_OK){
  val intentFromResult = result.data
  if(intentFromResult != null){
   val imageData = intent.data
    }
   }
 }
}
//buraya kadar fotografin secilince yerini gosteren bir veriye kadar ulastik fakat bundan sonra fotolari SQLite kaydetmemiz icin Bitmapler olusturmaliyiz.

    binding.imageView.setImageURI(imageData)
// soyle yazarak aslinda direkt fotografi oraya ekleyebilirdik ama SQLlite a kaydetmek istedigimizden anlik degil datadan calismasi icin oraya kaydedicez bunun icin de
// bitmeplere ihtiyac duyucaz.Usttekini kullanmicaz

private lateinit var selectedBitmap: Bitmap? = null
// bitmapi tanimladik

 if(imageData != null){
                        try {
                            if(Build.VERSION.SDK_INT>28){
                                val source = ImageDecoder.createSource(this@ArtActivity.contentResolver,imageData)
                                selectedBitmap = ImageDecoder.decodeBitmap(source)
                                binding.imageView.setImageBitmap(selectedBitmap)
                            }else{

                                   selectedBitmap = MediaStore.Images.Media.getBitmap(contentResolver,imageData)
                                   binding.imageView.setImageBitmap(selectedBitmap)


                                   }


                        }catch (e:Exception){
                            e.printStackTrace()
                        }
}

//try and catch in icinde API 28 ustu cihazlar icin imagedecoder ile fotografi baglamayi basardik
// fakat 28 API altina daha farkli bir yontem ile caliscaz
// else ile 28 altinda calisan API lar icin fotografin datasini aldip binding ile imageview'e bagladik

/// simdiye kadar biz sadece galeriden veriyi aldik nasil oldu activity baslatildi activty resultlar olusturuldu bunlara bitmaplar konuldu
/// ve bitmaplarda imageview'e baglandi

////Simdi ise permision almamiz gerekiyor
// ilk once permission denied edildiginde bir toast mesaji gosterelim
Toast.makeText(this@ArtActivity,"Permission needed!",Toast.LENGTH_LONG).show()
// eger result 1 yani permission granted ise galeriye intent yapmamiz gerekir yani galeriyi acmamiz gerekir
// ust kisimde select image yaparken zaten galeriye intent yapmistik ordan kodu aliyoruz
val intentToGallery = Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
// fakat setimage i calistirmadik neden cunku ActivityResultLauncher yoktu artik activityi calistira bildigimize ve sonuc olarak foto alabildigimize
//gore galeriye intent yapabiliriz
//  ActivityResultLauncher i calistirabiliriz
    activityResultLauncher.launch(intentToGallery)
//galeriye gecisi calistirmis olduk ayrica bunu selectImage altina da yapistirdik
//simdi selectImage icindeki else yani permission izni verilince yapilacaklardan birisi ise permissionLauncher calistirmak
//permissionLauncher'i altta tanimladigimiz icin ustte request permisson yapacagimiz yerlerde
                        permissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE)
// bunu calistirarak telefonun erkaninda direkt permission request ekrani gozukecek

////Kucuk Bitmap olusturmak
// SQLite ile 1 mbite i asan row yukleyemiyoruz
// dogal olarak gunumuzde cekilen fotlarin buyuk bir cogunlugu 1mbitedan fazla oldugu icin bu fotlari kucultcek fonksiyonlara ihtiyac duyuyoruz.

 private fun makeSmallerBitMap(image:Bitmap,maximumSize:Int): Bitmap{
        var width = image.width
        var height = image.height

        val imageRatio : Double = width.toDouble()/ height.toDouble()

        if(imageRatio > 1){
            //landscape
            width = maximumSize
            val scaledHeight = width / imageRatio
            height = scaledHeight.toInt()

        }else{
            //portrait
            height = maximumSize
            val scaledWidth = height * imageRatio
            width = scaledWidth.toInt()
        }
        return Bitmap.createScaledBitmap(image,100,100,true)
    }
 // basit bir algoritma yazarak kucultmus olduk

val artName = binding.artNameText.text.toString()
val artistName = binding.artistNameText.toString()
val year = binding.yearText.toString()

// saveButtonClicked fun altinda butun art'in hakkindaki bilgileri bagladik
// Sira yollanilan imageleri byte duzeyine indirmeye geldi
val outputStream = ByteArrayOutputStream()
smallBitmap.compress(Bitmap.CompressFormat.PNG,50,outputStream)
val byteArray = outputStream.toByteArray()

// byte a cevirmis olduk image'i

//simdi veri tabinimizi olusturma vakti
//databaseler try and catch ile yazilir

simdi butun bu yazdigimiz kaydettigimiz seyleri cekmemiz gerekicek

try{
            val database =  this.openOrCreateDatabase("Arts", MODE_PRIVATE,null)

            val cursor = database.rawQuery("SELECT * FROM arts",null)
            val artNameIx = cursor.getColumnIndex("artname")
            val idIx = cursor.getColumnIndex("id")

            while(cursor.moveToNext()){
                val name = cursor.getString(artNameIx)
                val id = cursor.getInt(idIx)
                val art = Art(name,id)
            }
        }catch (e:Exception){
            e.printStackTrace()
        }

// tablodan verileri cekmis olduk

private lateinit var artList:ArrayList<Art>
// bundan sonra recyclerView e gondericez bunu icin ise arrayListe ihtiyacimiz var
//arraylisti tanimladiktan sonra adapter yazmamiz lazim buna artAdapter dedik ve bunun gereken
//kodlarini yazdik ve orayi tamamladik sira mainacitivtye baglamaya geldi

private lateinit var artAdapter :ArtAdapter
//tanimladim adapteri

artList = ArrayList<Art>()
artAdapter = ArtAdapter(artList)

binding.recyclerView.layoutManager = LinearLayoutManager(this)
binding.recyclerView.adapter = artAdapter

//listelerimizi ekledik gerekli bagalantilari yaptik simdi geriye yazilarin recyclerView'e verilmesi var

artAdapter.notifyDataSetChanged()
// yazdigimiz datalari cekerken bu tablolardan olabilir veya internetten olabilir bunu kullannmakta fayda var
//bu recyclerViewe degisen veya eklenen verileri kendi icinde guncellemesini istiyoruz